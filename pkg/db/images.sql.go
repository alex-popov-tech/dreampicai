// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: images.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const imageCreate = `-- name: ImageCreate :one
insert into
  images (provider_id, owner_id, prompt, negative_prompt, status, model)
values
  ($1, $2, $3, $4, $5, $6)
returning
  id, provider_id, owner_id, status, prompt, negative_prompt, model, filename, created_at
`

type ImageCreateParams struct {
	ProviderID     string
	OwnerID        pgtype.Int4
	Prompt         string
	NegativePrompt string
	Status         ImageStatus
	Model          string
}

func (q *Queries) ImageCreate(ctx context.Context, arg ImageCreateParams) (Image, error) {
	row := q.db.QueryRow(ctx, imageCreate,
		arg.ProviderID,
		arg.OwnerID,
		arg.Prompt,
		arg.NegativePrompt,
		arg.Status,
		arg.Model,
	)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.OwnerID,
		&i.Status,
		&i.Prompt,
		&i.NegativePrompt,
		&i.Model,
		&i.Filename,
		&i.CreatedAt,
	)
	return i, err
}

const imageGet = `-- name: ImageGet :one
select
  id, provider_id, owner_id, status, prompt, negative_prompt, model, filename, created_at
from
  images
where
  id = $1
  AND owner_id = $2
`

type ImageGetParams struct {
	ID      int32
	OwnerID pgtype.Int4
}

func (q *Queries) ImageGet(ctx context.Context, arg ImageGetParams) (Image, error) {
	row := q.db.QueryRow(ctx, imageGet, arg.ID, arg.OwnerID)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.OwnerID,
		&i.Status,
		&i.Prompt,
		&i.NegativePrompt,
		&i.Model,
		&i.Filename,
		&i.CreatedAt,
	)
	return i, err
}

const imageList = `-- name: ImageList :many
select
  id, provider_id, owner_id, status, prompt, negative_prompt, model, filename, created_at
from
  images
where
  status = 'started'
  OR status = 'succeeded'
  AND owner_id = $1
ORDER BY
  id DESC
`

func (q *Queries) ImageList(ctx context.Context, ownerID pgtype.Int4) ([]Image, error) {
	rows, err := q.db.Query(ctx, imageList, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.ProviderID,
			&i.OwnerID,
			&i.Status,
			&i.Prompt,
			&i.NegativePrompt,
			&i.Model,
			&i.Filename,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const imageUpdate = `-- name: ImageUpdate :one
update images
set
  status = $1,
  filename = $2
where
  provider_id = $3
returning
  id, provider_id, owner_id, status, prompt, negative_prompt, model, filename, created_at
`

type ImageUpdateParams struct {
	Status     ImageStatus
	Filename   pgtype.Text
	ProviderID string
}

func (q *Queries) ImageUpdate(ctx context.Context, arg ImageUpdateParams) (Image, error) {
	row := q.db.QueryRow(ctx, imageUpdate, arg.Status, arg.Filename, arg.ProviderID)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.OwnerID,
		&i.Status,
		&i.Prompt,
		&i.NegativePrompt,
		&i.Model,
		&i.Filename,
		&i.CreatedAt,
	)
	return i, err
}
