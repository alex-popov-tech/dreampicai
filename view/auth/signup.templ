package auth

import "dreampicai/view/layout"

type SignupErrors struct {
	Email           []error
	Password        []error
	ConfirmPassword []error
	Others          []error
}

type SignupData struct {
	Email           string
	Password        string
	ConfirmPassword string
}

templ Signup() {
	@layout.HomeLayout() {
		<div class="bg-base-300 rounded-lg shadow-xl p-8 max-w-md w-full mt-32 mx-auto">
			<h1 class="text-3xl font-bold text-center mb-6">Sign Up to Dreampicai</h1>
			@SignupForm(SignupData{}, SignupErrors{})
		</div>
	}
}

templ SignupForm(data SignupData, errors SignupErrors) {
	<form hx-trigger="submit" hx-post="/signup" hx-swap="outerHTML" class="flex flex-col">
		<label class="form-control w-full max-w-md">
			<div class="label">
				<span class="label-text text-xl">Email</span>
			</div>
			<input value={ data.Email } type="email" name="email" required autocomplete="off" placeholder="chris@gmail.com" class={ "input input-bordered w-full max-w-md focus:outline-none", templ.KV("border-error", len(errors.Email) > 0) }/>
			<div class="label">
				for _, it := range errors.Email {
					<span class="label-text-alt text-error">{ it.Error() }</span>
				}
			</div>
		</label>
		<label class="form-control w-full max-w-md">
			<div class="label">
				<span class="label-text text-xl">Password</span>
			</div>
			<input value={ data.Password } type="password" name="password" required autocomplete="off" class={ "input input-bordered w-full max-w-md focus:outline-none", templ.KV("border-error", len(errors.Password) > 0) }/>
			<div class="label flex flex-col items-start">
				for _, it := range errors.Password {
					<span class="label-text-alt text-error">{ it.Error() }</span>
				}
			</div>
		</label>
		<label class="form-control w-full max-w-md">
			<div class="label">
				<span class="label-text text-xl">Confirm Password</span>
			</div>
			<input value={ data.ConfirmPassword } type="password" name="confirmPassword" required autocomplete="off" class={ "input input-bordered w-full max-w-md focus:outline-none", templ.KV("border-error", len(errors.Password) > 0) }/>
			<div class="label flex flex-col items-start">
				for _, it := range errors.ConfirmPassword {
					<span class="label-text-alt text-error">{ it.Error() }</span>
				}
				for _, it := range errors.Others {
					<span class="label-text-alt text-error">{ it.Error() }</span>
				}
			</div>
		</label>
		<button type="submit" class="btn btn-primary text-xl mt-4">Sign Up <i class="fa-solid fa-arrow-right"></i></button>
		<div class="divider">OR</div>
		<a href="/signin/github" class="btn btn-primary text-xl mt-4">Sign up with Github <i class="fa-brands fa-github"></i></a>
	</form>
}

templ SignupSuccessMessage(email string) {
	<span class="label-text text-xl">Congrats <span class="label-text text-primary text-xl italic">{ email }</span>, you are now proud member of dreampicai community. Please await your email confirmation letter.</span>
}
