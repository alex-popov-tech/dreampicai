package view

import (
	"dreampicai/domain"
	"dreampicai/view/layout"
	"dreampicai/view/ui"
	"fmt"
)

type GenerateViewData struct {
	Images           []domain.Image
	GenerateFormData GenerateFormData
}

type SelectOption struct {
	Text  string
	Value domain.ReplicateModel
}

type GenerateFormData struct {
	Models         []SelectOption
	SelectedModel  SelectOption
	Prompt         string
	NegativePrompt string
	Count          string
	ToastMessage   string
	ToastStatus    string
}

templ Generate(data GenerateViewData) {
	@layout.HomeLayout() {
		<div class="flex-1 flex gap-4">
			@GenerateForm(data.GenerateFormData)
			@ImageCards(data.Images)
		</div>
	}
}

templ GenerateForm(data GenerateFormData) {
	<form
		id="generate"
		class="w-1/3 max-w-96 flex flex-col items-center"
		hx-post="/generate"
		hx-swap="outerHTML"
		hx-target="this"
	>
		<div class="flex flex-col gap-4 h-4/5">
			<button type="submit" class="btn btn-secondary w-full text-xl">Generate <i class="fa-solid fa-arrow-right"></i></button>
			<label class="form-control w-full max-w-xs">
				<div class="label">
					<span class="label-text">Pick the model</span>
				</div>
				<select name="model" class="select select-bordered select-primary">
					for _, it := range data.Models {
						<option
							value={ it.Value }
							if it.Value == data.SelectedModel.Value {
								selected
							}
						>{ it.Text }</option>
					}
				</select>
			</label>
			<label class="form-control grow">
				<div class="label">
					<span class="label-text">Describe the portret you want to have</span>
				</div>
				<textarea minlength="10" name="prompt" class="textarea textarea-primary textarea-md h-full" placeholder="Prompt">{ data.Prompt }</textarea>
			</label>
			<label class="form-control">
				<div class="label">
					<span class="label-text">Describe what you do NOT want to have</span>
				</div>
				<textarea minlength="10" name="negative_prompt" class="textarea textarea-error" placeholder="Negative prompt">{ data.NegativePrompt }</textarea>
			</label>
			<label class="form-control">
				<div class="label">
					<span class="label-text">How much images do you want to generate</span>
				</div>
				<div class="join w-full flex">
					@radio("1", "count", "1", data.Count == "1")
					@radio("2", "count", "2", data.Count == "2")
					@radio("4", "count", "4", data.Count == "4")
				</div>
			</label>
			<style>
    .htmx-request input,
    .htmx-request select,
    .htmx-request button,
    .htmx-request textarea {
      pointer-events: none;
      opacity: 0.5;
      disabled: true;
    }
  </style>
		</div>
		if data.ToastMessage != "" {
			@ui.Toast(data.ToastMessage, data.ToastStatus)
		}
	</form>
}

templ radio(label, name, value string, selected bool) {
	<input
		class="join-item btn grow"
		type="radio"
		name={ name }
		value={ value }
		if selected {
			checked="checked"
		}
		aria-label={ label }
	/>
}

templ ImageCards(images []domain.Image) {
	<div
		id="cards"
		hx-get="/images"
		hx-trigger="refresh from:#generate"
		hx-swap="innerHTML"
		class="h-fit flex gap-4 flex-wrap p-4"
	>
		for _, it := range images {
			@ImageCard(it)
		}
	</div>
}

templ ImageCard(image domain.Image) {
	<div
		if image.Status == domain.ImageStatusStarted {
			hx-get={ fmt.Sprintf("/images/%d", image.ID) }
			hx-trigger="load delay:5000ms"
			hx-target="this"
			hx-swap="outerHTML"
		}
		onclick={ templ.ComponentScript{Call: fmt.Sprintf("image_modal_%d.showModal()", image.ID)} }
		class={ templ.KV("skeleton opacity-30", image.Status == domain.ImageStatusStarted), "w-56 h-72 rounded-lg cursor-pointer grow" }
	>
		if image.Status == domain.ImageStatusFailed {
			<div class="flex justify-center items-center h-full w-full">
				<i class="fa-solid fa-skull w-1/2 h-1/2"></i>
			</div>
		} else if image.Status == domain.ImageStatusStarted {
			<div class="flex justify-center items-center h-full w-full">
				<i class="fa-solid animate-[spin_2s_linear_infinite] fa-gear w-1/2 h-1/2"></i>
			</div>
		} else if image.Status == domain.ImageStatusSucceeded {
			<img loading="lazy" src={ image.Url } class="w-full h-full object-cover rounded-lg"/>
		}
		<dialog id={ fmt.Sprintf("image_modal_%d", image.ID) } class="modal">
			<div class="modal-box p-0 w-3/5 h-4/5 max-w-full cursor-pointer">
				<img src={ image.Url } class="w-full h-full object-cover rounded-lg"/>
			</div>
			<form method="dialog" class="modal-backdrop">
				<button>close</button>
			</form>
		</dialog>
	</div>
}
